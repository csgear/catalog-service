plugins {
	id 'application'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'java'
	id 'org.flywaydb.flyway' version "${flywayVersion}"
	id 'org.springframework.boot' version "${springBootVersion}"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group = 'com.vkeonline'
version = '1.0.0'
sourceCompatibility = '17'
description = 'Provides functionality for managing the books in the catalog.'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.0")
	set('testcontainersVersion', "1.16.0")
}

dependencies {
	implementation("commons-io:commons-io:${ioCommonsVersion}")
	implementation("org.apache.commons:commons-lang3:${commonsLang3Version}")
	implementation("org.apache.commons:commons-math3:${commonsMath3Version}")

	implementation("org.flywaydb:flyway-core:${flywayVersion}")
//    implementation("org.flywaydb:flyway-mysql:${flywayVersion}")

	// Lombok dependencies.
	compileOnly("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

	implementation("org.mariadb.jdbc:mariadb-java-client:${mariaDbJavaClientVersion}")
	implementation("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-validation:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
	implementation("org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}")
//    implementation("org.springframework.kafka:spring-kafka:${springKafkaVersion}")
	implementation("org.springframework:spring-context:${springVersion}")
	implementation("org.springframework:spring-webmvc:${springVersion}")

//    implementation 'org.springframework.cloud:spring-cloud-starter-config'

	annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

	testImplementation("junit:junit:${junitVersion}")
	testImplementation("org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}")
	testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	testImplementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
	testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage {
	imageName = "csgeear/${project.name}:${project.version}"
	environment = ["BP_JVM_VERSION": "17.*"]

	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Flyway Tasks
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
task flywayRename() {
	def target = this.getProject()
	String dateTime = LocalDate.now().toString() + LocalTime.now().toString()
	target.fileTree(dir: 'src/main/resources/db/migration', include: ['**/*.sql'], exclude: ['**/V*__*.sql', '**/R__*.sql']).each {
		it.renameTo(it.parent + "/V" + dateTime.replaceAll("[-:.]", "") + "__" + it.name)
	}
}

flyway {
	baselineOnMigrate = true
	baselineVersion = 0
	ignoreMissingMigrations = true
	outOfOrder = true
	password = "changeme"
	url = "jdbc:mariadb://localhost:3306/catalog?useLegacyDatatimeCode=false&serverTimezone=UTC"
	user = "mysql"
	validateOnMigrate = true
}